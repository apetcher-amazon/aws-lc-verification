/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

module EC where

type limb = [64]
type felem = [6][64]

type point = [3]felem
type JacobianBVPoint = { X : [384], Y : [384], Z : [384] }

primitive fiat_field_zero : felem

zero_felem: felem
zero_felem = [0, 0, 0, 0, 0, 0]


P384_MUL_WSIZE : [32]
P384_MUL_WSIZE = 7

P384_MUL_WSIZE_MASK : [16]
P384_MUL_WSIZE_MASK = (1 << 8) - 1

P384_MUL_TWO_TO_WSIZE : [16]
P384_MUL_TWO_TO_WSIZE = (1 << 7)

primitive fiat_field_one : felem

primitive fiat_field_square : felem -> felem

primitive fiat_field_mul : felem -> felem -> felem

primitive fiat_field_add : felem -> felem -> felem

primitive fiat_field_sub : felem -> felem -> felem

primitive fiat_field_opp : felem -> felem

constant_time_is_zero_w : limb -> limb
constant_time_is_zero_w x = if (x == zero) then 0xFFFFFFFFFFFFFFFF else 0

fiat_field_cmovznz : limb -> felem -> felem -> felem
fiat_field_cmovznz t f1 f2 = if (t == zero) then f1 else f2

fiat_field_nz : felem -> limb
fiat_field_nz f = foldl (||) 0 f

fiat_point_double : point -> point
fiat_point_double p = p'
  where
    x = p@0
    y = p@1
    z = p@2

    delta = (fiat_field_square z)
    gamma = (fiat_field_square y)
    beta = (fiat_field_mul x gamma)

    xminusdelta = (fiat_field_sub x delta)
    xplusdelta = (fiat_field_add x delta)
    twoxplusdelta = (fiat_field_add xplusdelta xplusdelta)
    threexplusdelta = (fiat_field_add xplusdelta twoxplusdelta)
    alpha = (fiat_field_mul xminusdelta threexplusdelta)

    twobeta = (fiat_field_add beta beta)
    fourbeta = (fiat_field_add twobeta twobeta)
    eightbeta = (fiat_field_add fourbeta fourbeta)
    x' = (fiat_field_sub (fiat_field_square alpha) eightbeta)

    yplusz = (fiat_field_add y z)
    ypluszsquared = (fiat_field_square yplusz)
    z' = (fiat_field_sub (fiat_field_sub ypluszsquared gamma) delta)

    fourgammasquared = (fiat_field_square (fiat_field_add gamma gamma))
    eightgammasquared = (fiat_field_add fourgammasquared fourgammasquared)
    y' = (fiat_field_sub (fiat_field_mul alpha (fiat_field_sub fourbeta x')) eightgammasquared)

    p' = [x', y', z']

testForDouble_ct : felem -> felem -> felem -> felem -> Bit
testForDouble_ct p1z p2z h r = res
  where
    z1nz = (fiat_field_nz p1z)
    z2nz = (fiat_field_nz p2z)
    xneq = (fiat_field_nz h)
    yneq = (fiat_field_nz r)

    res = ((constant_time_is_zero_w (xneq || yneq)) &&
            (~(constant_time_is_zero_w z1nz)) &&
            (~(constant_time_is_zero_w z2nz))
            ) != zero 

testForDouble : felem -> felem -> felem -> felem -> Bit
testForDouble p1z p2z h r = ((h==zero) && (r==zero) && (p1z != zero) && (p2z != zero))    

property testForDoubleEquiv (f1, f2, f3, f4) = (testForDouble_ct f1 f2 f3 f4) == (testForDouble f1 f2 f3 f4)

fiat_point_add : Bit -> point -> point -> point
fiat_point_add mixed p1 p2 = p
  where
    x1 = p1@0
    y1 = p1@1
    z1 = p1@2

    x2 = p2@0
    y2 = p2@1
    z2 = p2@2

    z1z1 = (fiat_field_square z1)

    // Jacobian arithmetic
    z2z2 = (fiat_field_square z2)
    u1_jac = (fiat_field_mul x1 z2z2)
    two_z1z2_jac = (fiat_field_sub (fiat_field_sub (fiat_field_square (fiat_field_add z1 z2)) z1z1) z2z2)
    s1_jac = (fiat_field_mul (fiat_field_mul z2 z2z2) y1)

    // mixed arithmetic
    u1_mixed = x1
    two_z1z2_mixed = (fiat_field_add z1 z1)
    s1_mixed = y1

    u1 = if mixed then u1_mixed else u1_jac
    two_z1z2 = if mixed then two_z1z2_mixed else two_z1z2_jac
    s1 = if mixed then s1_mixed else s1_jac

    u2 = (fiat_field_mul x2 z1z1)
    h = (fiat_field_sub u2 u1)
    
    z_out = (fiat_field_mul h two_z1z2)
    z1z1z1 = (fiat_field_mul z1 z1z1)
    s2 = (fiat_field_mul y2 z1z1z1)
    r = (fiat_field_add (fiat_field_sub s2 s1) (fiat_field_sub s2 s1))

    
    is_nontrivial_double = (testForDouble z1 z2 h r)                                  

    i = (fiat_field_square (fiat_field_add h h))
    j = (fiat_field_mul h i)
    v = (fiat_field_mul u1 i)

    x_out = (fiat_field_sub (fiat_field_sub (fiat_field_sub (fiat_field_square r) j) v) v)
    y_out = (fiat_field_sub (fiat_field_sub (fiat_field_mul (fiat_field_sub v x_out) r) (fiat_field_mul s1 j)) (fiat_field_mul s1 j))

    z1nz = (fiat_field_nz z1)
    z2nz = (fiat_field_nz z2)
    x3 = (fiat_field_cmovznz z2nz x1 (fiat_field_cmovznz z1nz x2 x_out))
    y3 = (fiat_field_cmovznz z2nz y1 (fiat_field_cmovznz z1nz y2 y_out))
    z3 = (fiat_field_cmovznz z2nz z1 (fiat_field_cmovznz z1nz z2 z_out))

    p = if is_nontrivial_double then (fiat_point_double p1) else [x3, y3, z3]


type scalar = [384]
type point_table = [64]point
type point_id = [16]
type wsize = 7

fiat_pre_comp_table : point -> point_table
fiat_pre_comp_table p = foldl f (repeat p) [1..63]
  where
    twoP = (fiat_point_double p)
    f z i  = update z i (fiat_point_add 0 twoP (z@(i-1)))

primitive fiat_get_bit : scalar -> [32] -> [64]

sign_extend_16_64 : [16] -> [64]
sign_extend_16_64 x = (if (x@0) then (~zero:[48]) else (zero:[48])) # x

sign_extend_16_32 : [16] -> [32]
sign_extend_16_32 x = (if (x@0) then (~zero:[16]) else (zero:[16])) # x

sign_extend_8_16 : [8] -> [16]
sign_extend_8_16 x = (if (x@0) then (~zero:[8]) else (zero:[8])) # x

sign_extend_8_32 : [8] -> [32]
sign_extend_8_32 x = (if (x@0) then (~zero:[24]) else (zero:[24])) # x


fiat_mul_scalar_rwnaf_loop_body : scalar -> [55][16] -> [16] -> [64] -> ([55][16], [16])
fiat_mul_scalar_rwnaf_loop_body s out window i = (out', window')
  where
    d = ((window && P384_MUL_WSIZE_MASK) - P384_MUL_TWO_TO_WSIZE)
    out' = update out i d
    // Not sure why this is unsigned shift && some constant, but that's what the code does
    window_0 = (((sign_extend_16_64 window) - (sign_extend_16_64 d)) >> P384_MUL_WSIZE) && 33554431
    i_wsize = (drop`{32} i) * P384_MUL_WSIZE
    window_1 = window_0 + ((fiat_get_bit s (i_wsize + (P384_MUL_WSIZE + 1))) << 1)
    window_2 = window_1 + ((fiat_get_bit s (i_wsize + (P384_MUL_WSIZE + 2))) << 2)
    window_3 = window_2 + ((fiat_get_bit s (i_wsize + (P384_MUL_WSIZE + 3))) << 3)
    window_4 = window_3 + ((fiat_get_bit s (i_wsize + (P384_MUL_WSIZE + 4))) << 4)
    window_5 = window_4 + ((fiat_get_bit s (i_wsize + (P384_MUL_WSIZE + 5))) << 5)
    window_6 = window_5 + ((fiat_get_bit s (i_wsize + (P384_MUL_WSIZE + 6))) << 6)
    window_7 = window_6 + ((fiat_get_bit s (i_wsize + (P384_MUL_WSIZE + 7))) << 7)
    window' = drop`{48} window_7

fiat_mul_scalar_rwnaf : scalar -> [55]point_id -> [55]point_id
fiat_mul_scalar_rwnaf in buf = out'
  where
    window = zero # (((drop`{376} in) && (drop`{8} P384_MUL_WSIZE_MASK)) || 1)
    f (z, w) i = fiat_mul_scalar_rwnaf_loop_body in z w i
    (out, window') = foldl f (buf, window) [0 .. 53]
    out' = update out 54 window'

/*
fiat_select_point : [64] -> point_table -> point
fiat_select_point i t = t@i
*/

fiat_select_point_loop_body : [64] -> point -> [64] -> point -> point
fiat_select_point_loop_body idx acc i p = [x, y, z]
  where 
    mismatch = i ^ idx
    x = (fiat_field_cmovznz mismatch (p@0) (acc@0))
    y = (fiat_field_cmovznz mismatch (p@1) (acc@1))
    z = (fiat_field_cmovznz mismatch (p@2) (acc@2))
   
fiat_select_point_ct : [64] -> point_table -> point
fiat_select_point_ct idx t = 
  foldl f def (zip (take [0...]) t)
    where
      def = [zero_felem, zero_felem, zero_felem]
      f acc (i, p) = fiat_select_point_loop_body idx acc i p


conditional_subtract_if_even_ct : point -> scalar -> point -> point
conditional_subtract_if_even_ct p1 t p2 = r where
  t_limb = (byte_to_limb ((drop`{376} t) && 1))
  tmp1 = [p2@0, (fiat_field_opp (p2@1)), p2@2]
  tmp2 = fiat_point_add 0 p1 tmp1
  r = [(fiat_field_cmovznz t_limb (tmp2@0) (p1@0)), 
      (fiat_field_cmovznz t_limb (tmp2@1) (p1@1)), 
      (fiat_field_cmovznz t_limb (tmp2@2) (p1@2))]

primitive fiat_from_generic : [384] -> felem
primitive fiat_to_generic : felem -> [384]

point_id_to_limb : point_id -> limb 
point_id_to_limb x = (0:[48]) # (x)

byte_to_limb : [8] -> limb 
byte_to_limb x = (0:[56]) # (x)

fiat_double_add_body : point_table -> point -> point_id -> point
fiat_double_add_body t p d = res
  where
    doubled = foldl (\x -> \y -> fiat_point_double x) p [0 .. (wsize - 1)]
    is_neg = (d >> 7) && 1
    abs_d = (d ^ (-is_neg)) + is_neg
    idx = abs_d >>$ 1
    tmp = (fiat_select_point_ct (sign_extend_16_64 idx) t)
    ftmp = fiat_field_opp (tmp@1)
    r = [tmp@0, (fiat_field_cmovznz (point_id_to_limb is_neg) (tmp@1) ftmp), (tmp@2)]
    res = fiat_point_add 0 doubled r

fiat_point_mul : point -> scalar -> point
fiat_point_mul p s = r
  where
    pre_comp = fiat_pre_comp_table p
    rnaf = fiat_mul_scalar_rwnaf s (repeat 0)
    idx = ((rnaf@54) >>$ 1)
    acc = (fiat_select_point_ct (sign_extend_16_64 idx) pre_comp)
    res = foldl (fiat_double_add_body pre_comp) acc (rnaf @@ [53, 52 .. 0])
    r = conditional_subtract_if_even_ct res s (pre_comp@0)

fiat_point_mul_generic : JacobianBVPoint -> scalar -> JacobianBVPoint
fiat_point_mul_generic p s = r
  where
    px = fiat_from_generic p.X
    py = fiat_from_generic p.Y
    pz = fiat_from_generic p.Z
    r_fiat = (fiat_point_mul [px, py, pz] s)
    r = {X = fiat_to_generic (r_fiat@0), Y = fiat_to_generic (r_fiat@1), Z = fiat_to_generic (r_fiat@2)}





    