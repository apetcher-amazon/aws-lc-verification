diff --git a/crypto/fipsmodule/ec/p384.c b/crypto/fipsmodule/ec/p384.c
index 852ceb18b..4c98c2f7b 100644
--- a/crypto/fipsmodule/ec/p384.c
+++ b/crypto/fipsmodule/ec/p384.c
@@ -1149,6 +1149,80 @@ static void ec_GFp_nistp384_point_mul_public(const EC_GROUP *group,
   p384_to_generic(&r->Z, res[2]);
 }
 
+static const p384_felem p384_felem_zero = {
+    0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
+
+static int test_jacobian_affine_eq(
+    const p384_felem x, const p384_felem y, const p384_felem z,
+    const p384_felem ax, const p384_felem ay) {
+
+  p384_felem z2;
+  p384_felem affine_x;
+  p384_felem affine_y;
+
+  if (OPENSSL_memcmp(z, p384_felem_zero, sizeof(p384_felem)) == 0) {
+    return 0;
+  }
+
+  p384_inv_square(z2, z); // z^-2
+  p384_felem_mul(affine_x, x, z2); // x * z^-2
+  if (OPENSSL_memcmp(affine_x, ax, sizeof(p384_felem)) != 0) {
+    return 0;
+  }
+  
+  p384_felem_sqr(z2, z2);  // z^-4
+  p384_felem_mul(affine_y, y, z);   // y * z
+  p384_felem_mul(affine_y, affine_y, z2);   // y * z^-3
+  if (OPENSSL_memcmp(affine_y, ay, sizeof(p384_felem)) != 0) {
+    return 0;
+  }
+
+  return 1;
+  
+}
+
+static int p384_validate_base_table(void){
+
+  p384_felem p[3] = {{0}, {0}, {0}}, p2[3] = {{0}, {0}, {0}}, pow[3] = {{0}, {0}, {0}};
+
+  p384_felem_copy(pow[0], p384_g_pre_comp[0][0][0]);
+  p384_felem_copy(pow[1], p384_g_pre_comp[0][0][1]);
+  p384_felem_copy(pow[2], p384_felem_one);
+
+  for (int i = 0; i < 1; i++) {
+
+    p384_felem_copy(p[0], pow[0]);
+    p384_felem_copy(p[1], pow[1]);
+    p384_felem_copy(p[2], pow[2]);
+
+    if (!test_jacobian_affine_eq(p[0], p[1], p[2], 
+          p384_g_pre_comp[i][0][0], p384_g_pre_comp[i][0][1])) {
+      return 0;
+    }
+
+    p384_point_double(p2[0], p2[1], p2[2], p[0], p[1], p[2]);
+
+
+    for (size_t j = 1; j < P384_MUL_TABLE_SIZE; j++) {
+      p384_point_add(p[0], p[1], p[2],
+                   p[0], p[1], p[2], 0 /* both Jacobian */,
+                   p2[0], p2[1], p2[2]);
+
+      if (!test_jacobian_affine_eq(p[0], p[1], p[2], 
+          p384_g_pre_comp[i][j][0], p384_g_pre_comp[i][j][1])) {
+        return 0;
+      }
+    }
+
+    for (int j = 0; j < 20; j++) {
+      p384_point_double(pow[0], pow[1], pow[2], pow[0], pow[1], pow[2]);
+    }
+  }
+
+  return 1;
+
+}
+
 DEFINE_METHOD_FUNCTION(EC_METHOD, EC_GFp_nistp384_method) {
   out->point_get_affine_coordinates =
       ec_GFp_nistp384_point_get_affine_coordinates;
@@ -1173,6 +1247,10 @@ DEFINE_METHOD_FUNCTION(EC_METHOD, EC_GFp_nistp384_method) {
   out->scalar_to_montgomery_inv_vartime =
       ec_simple_scalar_to_montgomery_inv_vartime;
   out->cmp_x_coordinate = ec_GFp_nistp384_cmp_x_coordinate;
+
+  if (! p384_validate_base_table()) {
+    abort();
+  }
 }
 
 // ----------------------------------------------------------------------------
